name: CI

on:
  push:
    branches:
      # This is to make sure that there is no broken CI on
      # the main branch, and also for Sonarqube integration
      - 'main'
  # We need it for better Sonarqube integration
  pull_request:
    types: [opened, synchronize, reopened]

env:
  PYTHONUNBUFFERED: '1'

defaults:
  run:
    shell: bash

jobs:
  lint-and-test:
    name: Python ${{ matrix.python }}
    runs-on: ubuntu-latest

    # The maximum number of minutes to let a workflow run
    # before GitHub automatically cancels it. Default: 360
    timeout-minutes: 30

    strategy:
      # When set to true, GitHub cancels
      # all in-progress jobs if any matrix job fails.
      fail-fast: false

      matrix:
        python:
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 5

      - name: Set up Python ${{ matrix.python }}
        id: setup-python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: ${{ matrix.python }}

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.4
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: testing-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            testing-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

      - name: Validates the content of the pyproject.toml
        run: poetry check

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with=testing --without=docs --without=build --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run unit tests with coverage
        run: |
          source $VENV
          coverage run -m pytest ./confluence ./tests
          coverage combine
          coverage xml

      # - name: Setup pylint cache
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.cache/pylint
      #     key: ${{ runner.os }}-pylint-${{ hashFiles('**/*.py') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pylint-

      # - name: Lint the code
      #   run: make lint

      # - name: Type check with mypy
      #   run: make typecheck

      # - name: Check MANIFEST.in in a source package
      #   run: make manifest

      # - name: Run unit tests with coverage
      #   run: make test
      #   env:
      #     CONFLUENCE_API_TOKEN: fake-token
      #     CONFLUENCE_API_USER: fake-user@site.com

      # - name: Combine coverage reports
      #   run: make ccov

      # - name: Build package distribution (sdist and wheel)
      #   run: make build

      # TODO: Implement me
      # - uses: codecov/codecov-action@v5.1.1
      #   if: success()
      #   with:
      #     fail_ci_if_error: false
      #     name: codecov-umbrella
      #     flags: unittests
      #     env_vars: OS,PYTHON
      #     files: ./coverage/xml/coverage.xml
      #     token: ${{ secrets.CODECOV_TOKEN }}

      - name: Success Reporting
        if: success()
        run: git log --format=fuller -5
